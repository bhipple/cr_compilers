))))))#45 CLASS
Board#45 INHERITS
IO{rows:#47 IN
t;columns:#48 IN
t;board_size:#49 IN
t;size_#51 OF
_board(#51 IN
itial:Str#51 IN
g):#51 IN
t{#52 IN
itial.length()};board_#55 IN
it(start:Str#55 IN
g):{(#56 LET
size:#56 IN
t<-size_#56 OF
_board(start)#56 IN
{#58 IF
size=#58 INT_CONST 15
THEN
{rows<-#60 INT_CONST 3
;columns<-#61 INT_CONST 5
;board_size<-size;}#64 ELSE
IF
size=#64 INT_CONST 16
THEN
{rows<-#66 INT_CONST 4
;columns<-#67 INT_CONST 4
;board_size<-size;}#70 ELSE
IF
size=#70 INT_CONST 20
THEN
{rows<-#72 INT_CONST 4
;columns<-#73 INT_CONST 5
;board_size<-size;}#76 ELSE
IF
size=#76 INT_CONST 21
THEN
{rows<-#78 INT_CONST 3
;columns<-#79 INT_CONST 7
;board_size<-size;}#82 ELSE
IF
size=#82 INT_CONST 25
THEN
{rows<-#84 INT_CONST 5
;columns<-#85 INT_CONST 5
;board_size<-size;}#88 ELSE
IF
size=#88 INT_CONST 28
THEN
{rows<-#90 INT_CONST 7
;columns<-#91 INT_CONST 4
;board_size<-size;}#94 ELSE
{rows<-#96 INT_CONST 5
;columns<-#97 INT_CONST 5
;board_size<-size;}#100 FI
FI
FI
FI
FI
FI
;self;})};};#110 CLASS
CellularAutomaton#110 INHERITS
Board{population_map:Str#111 IN
g;#113 IN
it(map:Str#113 IN
g):{{population_map<-map;board_#116 IN
it(map);self;}};pr#124 IN
t():{(#126 LET
i:#126 IN
t<-#126 INT_CONST 0
IN
(#127 LET
num:#127 IN
t<-board_size#127 IN
{out_str#129 IN
g(#129 STR_CONST "\\n"
);#130 WHILE
i<num#130 LOOP
{out_str#132 IN
g(population_map.substr(i,columns));out_str#133 IN
g(#133 STR_CONST "\\n"
);i<-i+columns;}#136 POOL
;out_str#137 IN
g(#137 STR_CONST "\\n"
);self;}))};num_cells():#143 IN
t{population_map.length()};cell(position:#147 IN
t):Str#147 IN
g{#148 IF
board_size-#148 INT_CONST 1
<position#148 THEN
STR_CONST " "
ELSE
population_map.substr(position,#151 INT_CONST 1
)#152 FI
};north(position:#155 IN
t):Str#155 IN
g{#156 IF
(position-columns)<#156 INT_CONST 0
THEN
STR_CONST " "
ELSE
cell(position-columns)#160 FI
};south(position:#163 IN
t):Str#163 IN
g{#164 IF
board_size<(position+columns)#164 THEN
STR_CONST " "
ELSE
cell(position+columns)#168 FI
};east(position:#171 IN
t):Str#171 IN
g{#172 IF
(((position+#172 INT_CONST 1
)/columns)*columns)=(position+#172 INT_CONST 1
)#172 THEN
STR_CONST " "
ELSE
cell(position+#175 INT_CONST 1
)#176 FI
};west(position:#179 IN
t):Str#179 IN
g{#180 IF
position=#180 INT_CONST 0
THEN
STR_CONST " "
ELSE
IF
((position/columns)*columns)=position#183 THEN
STR_CONST " "
ELSE
cell(position-#186 INT_CONST 1
)#187 FI
FI
};northwest(position:#190 IN
t):Str#190 IN
g{#191 IF
(position-columns)<#191 INT_CONST 0
THEN
STR_CONST " "
ELSE
IF
((position/columns)*columns)=position#193 THEN
STR_CONST " "
ELSE
north(position-#196 INT_CONST 1
)#197 FI
FI
};northeast(position:#200 IN
t):Str#200 IN
g{#201 IF
(position-columns)<#201 INT_CONST 0
THEN
STR_CONST " "
ELSE
IF
(((position+#203 INT_CONST 1
)/columns)*columns)=(position+#203 INT_CONST 1
)#203 THEN
STR_CONST " "
ELSE
north(position+#206 INT_CONST 1
)#207 FI
FI
};southeast(position:#210 IN
t):Str#210 IN
g{#211 IF
board_size<(position+columns)#211 THEN
STR_CONST " "
ELSE
IF
(((position+#213 INT_CONST 1
)/columns)*columns)=(position+#213 INT_CONST 1
)#213 THEN
STR_CONST " "
ELSE
south(position+#216 INT_CONST 1
)#217 FI
FI
};southwest(position:#220 IN
t):Str#220 IN
g{#221 IF
board_size<(position+columns)#221 THEN
STR_CONST " "
ELSE
IF
((position/columns)*columns)=position#223 THEN
STR_CONST " "
ELSE
south(position-#226 INT_CONST 1
)#227 FI
FI
};neighbors(position:#230 IN
t):#230 IN
t{{#232 IF
north(position)=#232 STR_CONST "X"
THEN
INT_CONST 1
ELSE
INT_CONST 0
FI
+#233 IF
south(position)=#233 STR_CONST "X"
THEN
INT_CONST 1
ELSE
INT_CONST 0
FI
+#234 IF
east(position)=#234 STR_CONST "X"
THEN
INT_CONST 1
ELSE
INT_CONST 0
FI
+#235 IF
west(position)=#235 STR_CONST "X"
THEN
INT_CONST 1
ELSE
INT_CONST 0
FI
+#236 IF
northeast(position)=#236 STR_CONST "X"
THEN
INT_CONST 1
ELSE
INT_CONST 0
FI
+#237 IF
northwest(position)=#237 STR_CONST "X"
THEN
INT_CONST 1
ELSE
INT_CONST 0
FI
+#238 IF
southeast(position)=#238 STR_CONST "X"
THEN
INT_CONST 1
ELSE
INT_CONST 0
FI
+#239 IF
southwest(position)=#239 STR_CONST "X"
THEN
INT_CONST 1
ELSE
INT_CONST 0
FI
;}};cell_at_next_evolution(position:#247 IN
t):Str#247 IN
g{#249 IF
neighbors(position)=#249 INT_CONST 3
THEN
STR_CONST "X"
ELSE
IF
neighbors(position)=#252 INT_CONST 2
THEN
IF
cell(position)=#253 STR_CONST "X"
THEN
STR_CONST "X"
ELSE
STR_CONST "-"
FI
ELSE
STR_CONST "-"
FI
FI
};evolve():{(#265 LET
position:#265 IN
t<-#265 INT_CONST 0
IN
(#266 LET
num:#266 IN
t<-num_cells()#266 IN
(#267 LET
temp:Str#267 IN
g#267 IN
{#269 WHILE
position<num#269 LOOP
{temp<-temp.concat(cell_at_next_evolution(position));position<-position+#272 INT_CONST 1
;}#274 POOL
;population_map<-temp;self;})))};option():Str#284 IN
g{{(#286 LET
num:#286 IN
t#286 IN
{out_str#288 IN
g(#288 STR_CONST "\\nPlease chose a number:\\n"
);out_str#289 IN
g(#289 STR_CONST "\\t1: A cross\\n"
);out_str#290 IN
g(#290 STR_CONST "\\t2: A slash from the upper left to lower right\\n"
);out_str#291 IN
g(#291 STR_CONST "\\t3: A slash from the upper right to lower left\\n"
);out_str#292 IN
g(#292 STR_CONST "\\t4: An X\\n"
);out_str#293 IN
g(#293 STR_CONST "\\t5: A greater than sign \\n"
);out_str#294 IN
g(#294 STR_CONST "\\t6: A less than sign\\n"
);out_str#295 IN
g(#295 STR_CONST "\\t7: Two greater than signs\\n"
);out_str#296 IN
g(#296 STR_CONST "\\t8: Two less than signs\\n"
);out_str#297 IN
g(#297 STR_CONST "\\t9: A 'V'\\n"
);out_str#298 IN
g(#298 STR_CONST "\\t10: An inverse 'V'\\n"
);out_str#299 IN
g(#299 STR_CONST "\\t11: Numbers 9 and 10 combined\\n"
);out_str#300 IN
g(#300 STR_CONST "\\t12: A full grid\\n"
);out_str#301 IN
g(#301 STR_CONST "\\t13: A 'T'\\n"
);out_str#302 IN
g(#302 STR_CONST "\\t14: A plus '+'\\n"
);out_str#303 IN
g(#303 STR_CONST "\\t15: A 'W'\\n"
);out_str#304 IN
g(#304 STR_CONST "\\t16: An 'M'\\n"
);out_str#305 IN
g(#305 STR_CONST "\\t17: An 'E'\\n"
);out_str#306 IN
g(#306 STR_CONST "\\t18: A '3'\\n"
);out_str#307 IN
g(#307 STR_CONST "\\t19: An 'O'\\n"
);out_str#308 IN
g(#308 STR_CONST "\\t20: An '8'\\n"
);out_str#309 IN
g(#309 STR_CONST "\\t21: An 'S'\\n"
);out_str#310 IN
g(#310 STR_CONST "Your choice => "
);num<-#311 IN
_#311 IN
t();out_str#312 IN
g(#312 STR_CONST "\\n"
);#313 IF
num=#313 INT_CONST 1
THEN
STR_CONST " XX  XXXX XXXX  XX  "
ELSE
IF
num=#315 INT_CONST 2
THEN
STR_CONST "    X   X   X   X   X    "
ELSE
IF
num=#317 INT_CONST 3
THEN
STR_CONST "X     X     X     X     X"
ELSE
IF
num=#319 INT_CONST 4
THEN
STR_CONST "X   X X X   X   X X X   X"
ELSE
IF
num=#321 INT_CONST 5
THEN
STR_CONST "X     X     X   X   X    "
ELSE
IF
num=#323 INT_CONST 6
THEN
STR_CONST "    X   X   X     X     X"
ELSE
IF
num=#325 INT_CONST 7
THEN
STR_CONST "X  X  X  XX  X      "
ELSE
IF
num=#327 INT_CONST 8
THEN
STR_CONST " X  XX  X  X  X     "
ELSE
IF
num=#329 INT_CONST 9
THEN
STR_CONST "X   X X X   X  "
ELSE
IF
num=#331 INT_CONST 10
THEN
STR_CONST "  X   X X X   X"
ELSE
IF
num=#333 INT_CONST 11
THEN
STR_CONST "X X X X X X X X"
ELSE
IF
num=#335 INT_CONST 12
THEN
STR_CONST "XXXXXXXXXXXXXXXXXXXXXXXXX"
ELSE
IF
num=#337 INT_CONST 13
THEN
STR_CONST "XXXXX  X    X    X    X  "
ELSE
IF
num=#339 INT_CONST 14
THEN
STR_CONST "  X    X  XXXXX  X    X  "
ELSE
IF
num=#341 INT_CONST 15
THEN
STR_CONST "X     X X X X   X X  "
ELSE
IF
num=#343 INT_CONST 16
THEN
STR_CONST "  X X   X X X X     X"
ELSE
IF
num=#345 INT_CONST 17
THEN
STR_CONST "XXXXX   X   XXXXX   X   XXXX"
ELSE
IF
num=#347 INT_CONST 18
THEN
STR_CONST "XXX    X   X  X    X   XXXX "
ELSE
IF
num=#349 INT_CONST 19
THEN
STR_CONST " XX X  XX  X XX "
ELSE
IF
num=#351 INT_CONST 20
THEN
STR_CONST " XX X  XX  X XX X  XX  X XX "
ELSE
IF
num=#353 INT_CONST 21
THEN
STR_CONST " XXXX   X    XX    X   XXXX "
ELSE
STR_CONST "                         "
FI
FI
FI
FI
FI
FI
FI
FI
FI
FI
FI
FI
FI
FI
FI
FI
FI
FI
FI
FI
FI
;});}};prompt():Bool{{(#368 LET
ans:Str#368 IN
g#368 IN
{out_str#370 IN
g(#370 STR_CONST "Would you like to continue with the next generation? \\n"
);out_str#371 IN
g(#371 STR_CONST "Please use lowercase y or n for your answer [y]: "
);ans<-#372 IN
_str#372 IN
g();out_str#373 IN
g(#373 STR_CONST "\\n"
);#374 IF
ans=#374 STR_CONST "n"
THEN
BOOL_CONST false
ELSE
BOOL_CONST true
FI
;});}};prompt#385 INT_CONST 2
():Bool{(#386 LET
ans:Str#386 IN
g#386 IN
{out_str#388 IN
g(#388 STR_CONST "\\n\\n"
);out_str#389 IN
g(#389 STR_CONST "Would you like to choose a background pattern? \\n"
);out_str#390 IN
g(#390 STR_CONST "Please use lowercase y or n for your answer [n]: "
);ans<-#391 IN
_str#391 IN
g();#392 IF
ans=#392 STR_CONST "y"
THEN
BOOL_CONST true
ELSE
BOOL_CONST false
FI
;})};};#404 CLASS
Ma#404 IN
INHERITS
CellularAutomaton{cells:CellularAutomaton;ma#407 IN
():{{(#409 LET
cont#409 IN
ue:Bool#409 IN
(#410 LET
choice:Str#410 IN
g#410 IN
{out_str#412 IN
g(#412 STR_CONST "Welcome to the Game of Life.\\n"
);out_str#413 IN
g(#413 STR_CONST "There are many initial states to choose from. \\n"
);#414 WHILE
prompt#414 INT_CONST 2
()#414 LOOP
{cont#416 IN
ue<-#416 BOOL_CONST true
;choice<-option();cells<-(#418 NEW
CellularAutomaton).#418 IN
it(choice);cells.pr#419 IN
t();#420 WHILE
cont#420 IN
ue#420 LOOP
IF
prompt()#421 THEN
{cells.evolve();cells.pr#424 IN
t();}#426 ELSE
cont#427 IN
ue<-#427 BOOL_CONST false
FI
POOL
;}#431 POOL
;self;}));}};};